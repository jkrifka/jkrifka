# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
updated_damages = []
def update_damages(list):
    for cost in list:
        if cost == "Damages not recorded":
            updated_damages.append("Damages not recorded")
        if cost[-1] == "M":
            updated_damages.append((float(cost[:-1])) * conversion.get("M"))
        if cost[-1] == "B":
            updated_damages.append((float(cost[:-1])) * conversion.get("B"))

# test function by updating damages

update_damages(damages)
print(updated_damages)

# 2 
# Create a Table
hurricanes = {}
# Create and view the hurricanes dictionary
def create_dictionary():
  for i in range(34):
    hurricanes[names[i]] = {'Name': names[i], 'Month': months[i], 'Year': years[i], 'Max Sustained Wind': max_sustained_winds[i], 'Areas Affected': areas_affected[i], 'Damage': updated_damages[i], 'Deaths': deaths[i]}
  return hurricanes

hurricanes = create_dictionary()

# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key
def hurricane_by_year(hurricanes):
  hurricane_year = {}
  for cane in hurricanes:
    current_year = hurricanes[cane]['Year']
    current_cane = hurricanes[cane]
    if current_year not in hurricane_year:
      hurricane_year[current_year] = [current_cane]
    else:
      hurricane_year[current_year].append(current_cane)
  return hurricane_year

hurricane_year = hurricane_by_year(hurricanes)
print(hurricane_year)

# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def affected_areas(hurricanes):
  hurricane_areas = {}
  for cane in hurricanes:
    for area in hurricanes[cane]['Areas Affected']:
      if area not in hurricane_areas:
        hurricane_areas[area] = 1
      else:
        hurricane_areas[area] += 1
  return hurricane_areas
hurricane_areas = affected_areas(hurricanes)
print(hurricane_areas)
# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def most_hit(hurricane_areas):
  max_area = "Central America"
  max_area_count = 0
  for area in hurricane_areas:
    if max_area_count < hurricane_areas[area]:
      max_area_count = hurricane_areas[area]
      max_area = area 
  return max_area, max_area_count
max_area, max_area_count = most_hit(hurricane_areas)
print(max_area, max_area_count)
# 6
# Calculating the Deadliest Hurricane
def greatest_deaths(hurricanes):
  max_mortality_cane = 'start'
  max_mortality = 0
  for cane in hurricanes:
    if max_mortality < hurricanes[cane]['Deaths']:
      max_mortality_cane = cane
      max_mortality = hurricanes[cane]['Deaths']
  return max_mortality_cane, max_mortality
max_mortality_cane, max_mortality = greatest_deaths(hurricanes)
print(max_mortality_cane, max_mortality)
# find highest mortality hurricane and the number of deaths

mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
# 7
# Rating Hurricanes by Mortality
def mortality_rating(hurricanes):
  hurricanes_mortality_rated = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for cane in hurricanes:
    if mortality_scale[4] < hurricanes[cane]['Deaths']:
      hurricanes_mortality_rated[5].append(cane)
    elif mortality_scale[3] < hurricanes[cane]['Deaths']:
      hurricanes_mortality_rated[4].append(cane)
    elif mortality_scale[2] < hurricanes[cane]['Deaths']:
      hurricanes_mortality_rated[3].append(cane)
    elif mortality_scale[1] < hurricanes[cane]['Deaths']:
      hurricanes_mortality_rated[2].append(cane)
    elif mortality_scale[0] < hurricanes[cane]['Deaths']:
      hurricanes_mortality_rated[1].append(cane)
  return hurricanes_mortality_rated
hurricanes_mortality_rated = mortality_rating(hurricanes)
print(hurricanes_mortality_rated)

# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage
def most_damage(hurricanes):
  max_damage_cane = "start"
  max_damage_amount = 0
  for cane in hurricanes:
    if hurricanes[cane]['Damage'] == 'Damages not recorded':
      continue
    elif max_damage_amount < hurricanes[cane]['Damage']:
      max_damage_cane = cane
      max_damage_amount = hurricanes[cane]['Damage']
  return max_damage_cane, max_damage_amount
max_damage_cane, max_damage_amount = most_damage(hurricanes)
print(max_damage_cane, max_damage_amount)
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def damage_severity(hurricanes):
  hurricanes_damage_rated = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for cane in hurricanes:
    if hurricanes[cane]['Damage'] == 'Damages not recorded':
      hurricanes_damage_rated[0].append(cane)
    elif damage_scale[4] < hurricanes[cane]['Damage']:
      hurricanes_damage_rated[5].append(cane)
    elif damage_scale[3] < hurricanes[cane]['Damage']:
      hurricanes_damage_rated[4].append(cane)
    elif damage_scale[2] < hurricanes[cane]['Damage']:
      hurricanes_damage_rated[3].append(cane)
    elif damage_scale[1] < hurricanes[cane]['Damage']:
      hurricanes_damage_rated[2].append(cane)
    elif damage_scale[0] < hurricanes[cane]['Damage']:
      hurricanes_damage_rated[1].append(cane)
  return hurricanes_damage_rated
hurricanes_damage_rated = damage_severity(hurricanes)
print(hurricanes_damage_rated)
